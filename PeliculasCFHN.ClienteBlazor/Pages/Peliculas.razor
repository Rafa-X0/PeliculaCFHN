
@page "/peliculas"
@using  Models
@using Services
@using System.Text.Json
@inject IPeliculaService PeliculaService
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">Peliculas</MudText>
<br />
<MudTextField @bind-Value="searchText" OnKeyUp="OnSearchKeyUp" Placeholder="Search" Adornment="Adornment.Start" 
    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
</MudTextField> 
<br />
<br />
@*comentario*@
@if(peliculas == null)
{
    <p>Cargando......</p>
}
else
{
    <MudGrid>
        @foreach (var item in peliculas)
        {
            <MudItem xs="12" sm="10" md="6" lg="4">
                <MudCard Width="85%" Height="100%" Class="d-flex flex-column">
                    <MudCardContent>
                        <img src="@item.Imagen" alt="Portada de @item.Titulo"  Elevation="25" class="rounded-lg" width="100%" height="300">
                        <MudText Variant="Typo.h6"><b>@item.Titulo</b></MudText>
                    </MudCardContent>
                    <div class="mt-auto text-center">
                        <MudCardActions>
                            <MudButton Link="@($"/detalles/{item.Id}")" Variant="Variant.Outlined" Color="Color.Success">Detalles</MudButton>
                        </MudCardActions>
                    </div>
                 </MudCard>              
            </MudItem>           
        }
    </MudGrid>
}

@code {
    //IEnumerable<Pelicula> peliculas = new List<Pelicula>();
    //protected override async Task OnInitializedAsync()
    //{
    //    peliculas = await PeliculaService.GetAll();
    //}
    private IEnumerable<Pelicula> peliculas = new List<Pelicula>();
    private string searchText = "";
    private Pelicula pelicula = new Pelicula();

    protected override async Task OnInitializedAsync()
    {
        await getAll();
    }

    private async Task getAll()
    {
        var httpResponse = await httpClient.PostAsJsonAsync("pelicula/buscar", pelicula);
        string respString = await httpResponse.Content.ReadAsStringAsync();
        peliculas = JsonSerializer.Deserialize<IEnumerable<Pelicula>>(respString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void goAdd()
    {
        NavigationManager.NavigateTo("pelicula/agregar");
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            buscarPelicula();
        }
    }

    private async Task buscarPelicula()
    {
        var httpResponse = await httpClient.PostAsJsonAsync($"pelicula/buscar", new Pelicula { Titulo = searchText});
        string respString = await httpResponse.Content.ReadAsStringAsync();
        peliculas = JsonSerializer.Deserialize<IEnumerable<Pelicula>>(respString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}